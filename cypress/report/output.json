{
  "stats": {
    "suites": 11,
    "tests": 56,
    "passes": 54,
    "pending": 0,
    "failures": 2,
    "start": "2021-11-11T18:28:17.068Z",
    "end": "2021-11-11T18:30:27.896Z",
    "duration": 76928,
    "testsRegistered": 56,
    "passPercent": 96.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4606526f-e1a4-4791-935b-15ab23d625a5",
      "title": "",
      "fullFile": "cypress/integration/TestesAPI/CARRINHOS.js",
      "file": "cypress/integration/TestesAPI/CARRINHOS.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
          "title": "testes da rota CARRINHOS",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar o login",
              "fullTitle": "testes da rota CARRINHOS Deve realizar o login",
              "timedOut": null,
              "duration": 809,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarUsuarioAdmin().then(usuario => {\n  cy.wrap({\n    email: usuario.email,\n    password: usuario.password\n  }).as(\"usuarioParaLogin\");\n});\ncy.get('@usuarioParaLogin').then(user => {\n  cy.logar(user).then(res => {\n    expect(res.status).to.be.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
              "err": {},
              "uuid": "d3be8797-ed60-45ea-b179-a9f9d9585783",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar quantidade e carrinhos existentes",
              "fullTitle": "testes da rota CARRINHOS Deve listar quantidade e carrinhos existentes",
              "timedOut": null,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarCarrinhos().then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('quantidade');\n  expect(res.body).to.have.property('carrinhos');\n  cy.validarContrato(res, \"get_carrinhos\", 200).then(res => {\n    expect(res).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "4a9f13ac-ac87-4988-a836-5058e9c1a6e6",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um novo carrinho",
              "fullTitle": "testes da rota CARRINHOS Deve cadastrar um novo carrinho",
              "timedOut": null,
              "duration": 214,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deletarCarrinhoCancelar(bearer).then(resposta => {\n  cy.buscarProduto().then(res => {\n    let produto = res._id;\n    cy.cadastrarCarrinho(bearer, produto).then(res => {\n      expect(res.status).to.be.equal(201);\n      expect(res.body.message).to.be.equal(\"Cadastro realizado com sucesso\");\n      expect(res.body).to.have.property(\"_id\");\n      cy.validarContrato(res, \"post_carrinhos\", 201).then(res => {\n        expect(res).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "c822a8b0-465b-4842-a81f-b2689e00dd6b",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve cadastrar mais de um carrinho no mesmo token",
              "fullTitle": "testes da rota CARRINHOS Não deve cadastrar mais de um carrinho no mesmo token",
              "timedOut": null,
              "duration": 130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarProduto().then(res => {\n  let produto = res._id;\n  cy.cadastrarCarrinho(bearer, produto).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body.message).to.be.equal(\"Não é permitido ter mais de 1 carrinho\");\n    cy.validarContrato(res, \"post_carrinhos\", 400).then(res => {\n      expect(res).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
              "err": {},
              "uuid": "6d616414-b918-48b2-9ff2-3ac899b83fab",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve cadastrar um carrinho caso o produto não exista",
              "fullTitle": "testes da rota CARRINHOS Não deve cadastrar um carrinho caso o produto não exista",
              "timedOut": null,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deletarCarrinhoCancelar(bearer).then(resposta => {\n  let produto = _factory.default.gerarId();\n  cy.cadastrarCarrinho(bearer, produto).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body.message).to.be.equal(\"Produto não encontrado\");\n    expect(res.body).to.not.have.property(\"_id\");\n    cy.validarContrato(res, \"post_carrinhos\", 400).then(res => {\n      expect(res).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
              "err": {},
              "uuid": "04bc597c-de4f-4193-b8dd-dec0c231ac66",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve cadastrar um novo carrinho casa não haja quantidade de produtos suficientes",
              "fullTitle": "testes da rota CARRINHOS Não deve cadastrar um novo carrinho casa não haja quantidade de produtos suficientes",
              "timedOut": null,
              "duration": 200,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deletarCarrinhoCancelar(bearer).then(resposta => {\n  cy.buscarProduto().then(res => {\n    let produto = res._id;\n    cy.cadastrarCarrinhoQNT(bearer, produto).then(res => {\n      expect(res.status).to.be.equal(400);\n      expect(res.body.message).to.be.equal(\"Produto não possui quantidade suficiente\");\n      expect(res.body).to.not.have.property(\"_id\");\n      cy.validarContrato(res, \"post_carrinhos\", 400).then(res => {\n        expect(res).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "6b86fe54-c0b8-4048-b237-0ad1bf295f3a",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar um carrinho por ID",
              "fullTitle": "testes da rota CARRINHOS Deve buscar um carrinho por ID",
              "timedOut": null,
              "duration": 374,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.BuscarCarrinhos().then(resp => {\n  let Id = resp._id;\n  cy.buscarCarrinhoId(Id).then(res => {\n    expect(res.status).to.be.equal(200);\n    expect(res.body).to.have.property(\"produtos\");\n    expect(res.body).to.have.property(\"precoTotal\");\n    expect(res.body).to.have.property(\"quantidadeTotal\");\n    expect(res.body).to.have.property(\"idUsuario\");\n    cy.validarContrato(res, \"get_carrinhos_id\", 200).then(res => {\n      expect(res).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
              "err": {
                "message": "Error: Contrato inválido, favor verificar!\n/produtos/0 must be array, but recive object\n/produtos/0 must match a schema in anyOf, but recive object",
                "estack": "Error: Contrato inválido, favor verificar!\n/produtos/0 must be array, but recive object\n/produtos/0 must match a schema in anyOf, but recive object\n    at Context.eval (http://localhost:62339/__cypress/tests?p=cypress\\support\\index.js:142:13)",
                "diff": null
              },
              "uuid": "7fb3c870-e677-4237-850e-74fbe9c118e9",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar um carrinho por ID inválido",
              "fullTitle": "testes da rota CARRINHOS Deve buscar um carrinho por ID inválido",
              "timedOut": null,
              "duration": 64,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let Id = _factory.default.gerarId();\ncy.buscarCarrinhoId(Id).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body.message).to.be.equal(\"Carrinho não encontrado\");\n  cy.validarContrato(res, \"get_carrinhos_id\", 400).then(res => {\n    expect(res).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "dae53d55-297b-424f-8a70-45c76cf1b6ab",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um carrinho vinculado a um token ao cancelar a compra",
              "fullTitle": "testes da rota CARRINHOS Deve deletar um carrinho vinculado a um token ao cancelar a compra",
              "timedOut": null,
              "duration": 238,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarProduto().then(res => {\n  let produto = res._id;\n  cy.cadastrarCarrinho(bearer, produto).then(res => {\n    cy.deletarCarrinhoCancelar(bearer).then(resp => {\n      expect(resp.status).to.be.equal(200);\n      expect(resp.body.message).to.be.equal(\"Registro excluído com sucesso. Estoque dos produtos reabastecido\");\n      cy.validarContrato(resp, \"delete_carrinhos\", 200).then(res => {\n        expect(res).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "a39fd1d7-5127-429c-81d2-1ea8c03f831f",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um carrinho vinculado a um token ao concluir a compra",
              "fullTitle": "testes da rota CARRINHOS Deve deletar um carrinho vinculado a um token ao concluir a compra",
              "timedOut": null,
              "duration": 228,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarProduto().then(res => {\n  let produto = res._id;\n  cy.cadastrarCarrinho(bearer, produto).then(res => {\n    cy.deletarCarrinhoConcluir(bearer).then(resp => {\n      expect(resp.status).to.be.equal(200);\n      expect(resp.body.message).to.be.equal(\"Registro excluído com sucesso\");\n      cy.validarContrato(resp, \"delete_carrinhos\", 200).then(res => {\n        expect(res).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "baa26fe5-34a0-4d0a-9125-7741f90ea6ff",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve excluir o carrinho caso não haja um token vinculado",
              "fullTitle": "testes da rota CARRINHOS Não deve excluir o carrinho caso não haja um token vinculado",
              "timedOut": null,
              "duration": 244,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarProduto().then(res => {\n  let produto = res._id;\n  cy.cadastrarCarrinho(bearer, produto).then(res => {\n    cy.deletarCarrinhoCancelar().then(resp => {\n      expect(resp.status).to.be.equal(401);\n      expect(resp.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.deletarCarrinhoConcluir().then(resposta => {\n        expect(resposta.status).to.be.equal(401);\n        expect(resposta.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n        cy.validarContrato(resposta, \"delete_carrinhos\", 401).then(res => {\n          expect(res).to.be.equal(\"Contrato validado!\");\n          cy.validarContrato(resp, \"delete_carrinhos\", 401).then(res => {\n            expect(res).to.be.equal(\"Contrato validado!\");\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "bbd1f897-c676-476e-a64c-3bcb720160cd",
              "parentUUID": "a39a9938-ec8a-45ff-9d9b-9075c2872b4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3be8797-ed60-45ea-b179-a9f9d9585783",
            "4a9f13ac-ac87-4988-a836-5058e9c1a6e6",
            "c822a8b0-465b-4842-a81f-b2689e00dd6b",
            "6d616414-b918-48b2-9ff2-3ac899b83fab",
            "04bc597c-de4f-4193-b8dd-dec0c231ac66",
            "6b86fe54-c0b8-4048-b237-0ad1bf295f3a",
            "dae53d55-297b-424f-8a70-45c76cf1b6ab",
            "a39fd1d7-5127-429c-81d2-1ea8c03f831f",
            "baa26fe5-34a0-4d0a-9125-7741f90ea6ff",
            "bbd1f897-c676-476e-a64c-3bcb720160cd"
          ],
          "failures": [
            "7fb3c870-e677-4237-850e-74fbe9c118e9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2691,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "35d8ae60-3385-468a-92ca-247c219bcdb3",
      "title": "",
      "fullFile": "cypress/integration/TestesAPI/LOGIN.js",
      "file": "cypress/integration/TestesAPI/LOGIN.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "71f649be-a963-4ce4-8db4-3818835ec25b",
          "title": "Testes de Login:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve trazer um usuário administrador para login (200)",
              "fullTitle": "Testes de Login: Deve trazer um usuário administrador para login (200)",
              "timedOut": null,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('loginCredentials').then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property('authorization');\n    bearer = res.body.authorization;\n    cy.validarContrato(res, 'post_login', 200).then(validacao => {\n      expect(validacao).to.be.equal('Contrato validado!');\n    });\n  });\n});",
              "err": {},
              "uuid": "5d327746-28e9-4d96-a1e1-9c0fb0baba8f",
              "parentUUID": "71f649be-a963-4ce4-8db4-3818835ec25b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve dar status code(400)\"Email e senha inválidos\"",
              "fullTitle": "Testes de Login: Deve dar status code(400)\"Email e senha inválidos\"",
              "timedOut": null,
              "duration": 54,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.logarErrado().then(res => {\n  expect(res.status).to.equal(400);\n  cy.validarContrato(res, 'post_login', 400).then(validacao => {\n    expect(validacao).to.be.equal('Contrato validado!');\n  });\n});",
              "err": {},
              "uuid": "1929bb34-ab75-4494-abab-bfd23a16cda7",
              "parentUUID": "71f649be-a963-4ce4-8db4-3818835ec25b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve dar status code(400)\"Email em Branco\"",
              "fullTitle": "Testes de Login: Deve dar status code(400)\"Email em Branco\"",
              "timedOut": null,
              "duration": 62,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('loginCredentials').then(user => {\n  cy.logar(user.emailEmBranco).then(res => {\n    expect(res.status).to.equal(400);\n    expect(res.body).property('email').to.equal('email não pode ficar em branco');\n    cy.validarContrato(res, 'post_login', 400).then(validacao => {\n      expect(validacao).to.be.equal('Contrato validado!');\n    });\n  });\n});",
              "err": {},
              "uuid": "69b000f0-4f95-44c7-b877-db46aa76588d",
              "parentUUID": "71f649be-a963-4ce4-8db4-3818835ec25b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d327746-28e9-4d96-a1e1-9c0fb0baba8f",
            "1929bb34-ab75-4494-abab-bfd23a16cda7",
            "69b000f0-4f95-44c7-b877-db46aa76588d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 236,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "048fd899-c272-4f78-b910-ad083635d4c1",
      "title": "",
      "fullFile": "cypress/integration/TestesAPI/PRODUTOS.js",
      "file": "cypress/integration/TestesAPI/PRODUTOS.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e7af17f9-7b05-4986-8c51-dbb39afcd4ef",
          "title": "Testes de GET Produtos:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve trazer a lista de produtos cadastrados, GET(200)",
              "fullTitle": "Testes de GET Produtos: Deve trazer a lista de produtos cadastrados, GET(200)",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listaProdutosCadastrados().then(res => {\n  expect(res.status).to.equal(200);\n  expect(res.body).to.have.property('quantidade');\n  cy.validarContrato(res, 'get_produtos', 200).then(validacao => {\n    expect(validacao).to.be.equal('Contrato validado!');\n  });\n});",
              "err": {},
              "uuid": "8e58846f-34d9-4b53-a3c2-dda68c9c7e4f",
              "parentUUID": "e7af17f9-7b05-4986-8c51-dbb39afcd4ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar um produto cadastrado, GET(200)",
              "fullTitle": "Testes de GET Produtos: Deve buscar um produto cadastrado, GET(200)",
              "timedOut": null,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('loginCredentials').then(user => {\n  cy.cadastrarProduto(user.produtoJaCadastrado);\n});\ncy.procuraProdutoCadastrado().then(res => {\n  expect(res.status).to.equal(200);\n  expect(res.body).to.have.property(\"quantidade\").to.equal(1);\n  cy.validarContrato(res, 'get_produtos', 200).then(validacao => {\n    expect(validacao).to.be.equal('Contrato validado!');\n  });\n});",
              "err": {},
              "uuid": "3331f9fd-63c8-4089-8b9a-3718c78c7731",
              "parentUUID": "e7af17f9-7b05-4986-8c51-dbb39afcd4ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8e58846f-34d9-4b53-a3c2-dda68c9c7e4f",
            "3331f9fd-63c8-4089-8b9a-3718c78c7731"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 327,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2da18615-7f37-420d-8ee2-1309c1deda2c",
          "title": "Testes de POST Produtos:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar um produto, POST(201):",
              "fullTitle": "Testes de POST Produtos: Deve cadastrar um produto, POST(201):",
              "timedOut": null,
              "duration": 152,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var produto = _factory.default.gerarProdutoBody();\ncy.fixture('loginCredentials').then(user => {\n  cy.cadastrarUsuario(user.usuarioJaCadastrado);\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property('authorization');\n    var bearer = res.body.authorization;\n    cy.validarContrato(res, 'post_login', 200).then(validacao => {\n      expect(validacao).to.be.equal('Contrato validado!');\n      cy.cadastrarProduto(bearer, produto).then(res => {\n        expect(res.status).to.equal(201);\n        expect(res.body).to.have.property('message', 'Cadastro realizado com sucesso');\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "851b1410-6b96-451b-ae55-2970fd19379e",
              "parentUUID": "2da18615-7f37-420d-8ee2-1309c1deda2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve tentar Cadastrar um produto já existente, POST(400)",
              "fullTitle": "Testes de POST Produtos: deve tentar Cadastrar um produto já existente, POST(400)",
              "timedOut": null,
              "duration": 148,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('loginCredentials').then(user => {\n  cy.logar(user.valido).then(res => {\n    var bearer = res.body.authorization;\n    cy.cadastrarProduto(bearer, user.produtoJaCadastrado);\n    cy.cadastrarProduto(bearer, user.produtoJaCadastrado).then(res => {\n      expect(res.status).to.equal(400);\n      expect(res.body).to.have.property('message', \"Já existe produto com esse nome\");\n    });\n  });\n});",
              "err": {},
              "uuid": "3c030190-4470-4942-8f03-2ec0bfcd82c5",
              "parentUUID": "2da18615-7f37-420d-8ee2-1309c1deda2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve tentar Cadastrar um produto sem token, POST(401)",
              "fullTitle": "Testes de POST Produtos: deve tentar Cadastrar um produto sem token, POST(401)",
              "timedOut": null,
              "duration": 58,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('loginCredentials').then(user => {\n  cy.cadastrarProduto(user.produtoJaCadastrado).then(res => {\n    expect(res.status).to.equal(401);\n    expect(res.body).to.have.property('message', \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n  });\n});",
              "err": {},
              "uuid": "3a473d39-355a-43d7-b362-05aa181af0c5",
              "parentUUID": "2da18615-7f37-420d-8ee2-1309c1deda2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "851b1410-6b96-451b-ae55-2970fd19379e",
            "3c030190-4470-4942-8f03-2ec0bfcd82c5",
            "3a473d39-355a-43d7-b362-05aa181af0c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 358,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3bbd0c14-fb1b-4523-b755-7556fb8e860a",
          "title": "testes da rota PRODUTOS/ get_id / delete_id / put_id ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar o login",
              "fullTitle": "testes da rota PRODUTOS/ get_id / delete_id / put_id  Deve realizar o login",
              "timedOut": null,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarUsuarioAdmin().then(usuario => {\n  cy.wrap({\n    email: usuario.email,\n    password: usuario.password\n  }).as(\"usuarioParaLogin\"); //{email: \"fulano@qa.com\", \"password\": \"teste\"}   \n});\ncy.get('@usuarioParaLogin').then(user => {\n  cy.logar(user).then(res => {\n    expect(res.status).to.be.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
              "err": {},
              "uuid": "9d98e3b4-5c85-492e-aa8f-7aad92a29741",
              "parentUUID": "3bbd0c14-fb1b-4523-b755-7556fb8e860a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve procurar um produto por ID válido",
              "fullTitle": "testes da rota PRODUTOS/ get_id / delete_id / put_id  Deve procurar um produto por ID válido",
              "timedOut": null,
              "duration": 164,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarProduto().then(product => {\n  let id = product._id;\n  cy.buscarProdutoId(id).then(res => {\n    expect(res.body).to.have.property('nome');\n    expect(res.body).to.have.property('quantidade');\n    expect(res.body).to.have.property('preco');\n    expect(res.body).to.have.property('descricao');\n    expect(res.body).to.have.property('quantidade');\n    expect(res.body).to.have.property('_id');\n    cy.validarContrato(res, \"get_produtos_id\", 200).then(res => {\n      expect(res).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
              "err": {},
              "uuid": "38e62369-7db4-4e43-8274-b933f73f2ad5",
              "parentUUID": "3bbd0c14-fb1b-4523-b755-7556fb8e860a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve procurar um produto por ID inválido",
              "fullTitle": "testes da rota PRODUTOS/ get_id / delete_id / put_id  Deve procurar um produto por ID inválido",
              "timedOut": null,
              "duration": 53,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let id = _factory.default.gerarId();\ncy.buscarProdutoId(id).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body.message).to.be.equal(\"Produto não encontrado\");\n  cy.validarContrato(res, \"get_produtos_id\", 400).then(res => {\n    expect(res).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "dcd76cbc-40e0-4abf-afc9-3153e8783741",
              "parentUUID": "3bbd0c14-fb1b-4523-b755-7556fb8e860a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto por ID",
              "fullTitle": "testes da rota PRODUTOS/ get_id / delete_id / put_id  Deve deletar um produto por ID",
              "timedOut": null,
              "duration": 92,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  let id = res.body._id;\n  cy.deletarProdutoId(id, bearer).then(res => {\n    expect(res.status).to.be.equal(200);\n    expect(res.body.message).to.be.equal(\"Registro excluído com sucesso\");\n    cy.validarContrato(res, \"delete_produtos_id\", 200).then(res => {\n      expect(res).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
              "err": {},
              "uuid": "1c2a9956-fe36-437b-8b96-b70e9e7b9fec",
              "parentUUID": "3bbd0c14-fb1b-4523-b755-7556fb8e860a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve deletar um produto que faz parte de um carrinho",
              "fullTitle": "testes da rota PRODUTOS/ get_id / delete_id / put_id  Não deve deletar um produto que faz parte de um carrinho",
              "timedOut": null,
              "duration": 292,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.buscarProdutoCarrinho().then(resp => {\n  let id = resp;\n  cy.deletarProdutoId(id, bearer).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body.message).to.be.equal(\"Não é permitido excluir produto que faz parte de carrinho\");\n    cy.validarContrato(res, \"delete_produtos_id\", 400).then(res => {\n      expect(res).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
              "err": {
                "message": "Error: Contrato inválido, favor verificar!\n must have required property 'idCarrinho', but recive object",
                "estack": "Error: Contrato inválido, favor verificar!\n must have required property 'idCarrinho', but recive object\n    at Context.eval (http://localhost:62339/__cypress/tests?p=cypress\\support\\index.js:142:13)",
                "diff": null
              },
              "uuid": "c2f2f08a-5c32-4751-beee-e56d54f9811b",
              "parentUUID": "3bbd0c14-fb1b-4523-b755-7556fb8e860a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve alterar os dados de um produto por ID",
              "fullTitle": "testes da rota PRODUTOS/ get_id / delete_id / put_id  Deve alterar os dados de um produto por ID",
              "timedOut": null,
              "duration": 187,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let alteracao = _factory.default.gerarProduto();\ncy.buscarProduto().then(product => {\n  let id = product._id;\n  cy.alterarProdutoId(id, bearer, alteracao).then(res => {\n    expect(res.status).to.be.equal(200);\n    expect(res.body.message).to.be.equal(\"Registro alterado com sucesso\");\n    cy.validarContrato(res, \"put_produtos_id\", 200).then(res => {\n      expect(res).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
              "err": {},
              "uuid": "3b1f8de0-e5f4-4626-b524-b8763f9dbf09",
              "parentUUID": "3bbd0c14-fb1b-4523-b755-7556fb8e860a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve alterar os dados de um produto por ID caso o nome ja exista",
              "fullTitle": "testes da rota PRODUTOS/ get_id / delete_id / put_id  Não deve alterar os dados de um produto por ID caso o nome ja exista",
              "timedOut": null,
              "duration": 312,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarProdutoSecond().then(productId => {\n  let id = productId._id;\n  cy.buscarProduto().then(product => {\n    cy.wrap({\n      nome: product.nome,\n      preco: product.preco,\n      descricao: product.descricao,\n      quantidade: product.quantidade\n    }).as(\"produtoExistente\");\n    cy.get('@produtoExistente').then(alteracao => {\n      cy.alterarProdutoId(id, bearer, alteracao).then(res => {\n        expect(res.status).to.be.equal(400);\n        expect(res.body.message).to.be.equal(\"Já existe produto com esse nome\");\n        cy.validarContrato(res, \"put_produtos_id\", 400).then(res => {\n          expect(res).to.be.equal(\"Contrato validado!\");\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "4c87ef76-d68e-4872-8f5d-3730ebf07ba0",
              "parentUUID": "3bbd0c14-fb1b-4523-b755-7556fb8e860a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d98e3b4-5c85-492e-aa8f-7aad92a29741",
            "38e62369-7db4-4e43-8274-b933f73f2ad5",
            "dcd76cbc-40e0-4abf-afc9-3153e8783741",
            "1c2a9956-fe36-437b-8b96-b70e9e7b9fec",
            "3b1f8de0-e5f4-4626-b524-b8763f9dbf09",
            "4c87ef76-d68e-4872-8f5d-3730ebf07ba0"
          ],
          "failures": [
            "c2f2f08a-5c32-4751-beee-e56d54f9811b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1298,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e9e1e912-2bbc-4a9e-94dd-8816b73b0a90",
      "title": "",
      "fullFile": "cypress/integration/TestesAPI/USUARIOS.js",
      "file": "cypress/integration/TestesAPI/USUARIOS.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5849ddd5-2141-43aa-82ae-03cac5c34324",
          "title": "Testes de POST Usuario:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve Cadastrar um usuário, POST(201)\"",
              "fullTitle": "Testes de POST Usuario: Deve Cadastrar um usuário, POST(201)\"",
              "timedOut": null,
              "duration": 102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.gerarUsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.equal(201);\n  expect(res.body).to.have.property('message', 'Cadastro realizado com sucesso');\n  cy.validarContrato(res, 'post_usuarios', 201).then(validacao => {\n    expect(validacao).to.be.equal('Contrato validado!');\n  });\n});",
              "err": {},
              "uuid": "c6cf5ff8-ae26-4e95-a871-5b5287125527",
              "parentUUID": "5849ddd5-2141-43aa-82ae-03cac5c34324",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar Cadastrar um usuário ja cadastrado, POST(400)\"",
              "fullTitle": "Testes de POST Usuario: Deve tentar Cadastrar um usuário ja cadastrado, POST(400)\"",
              "timedOut": null,
              "duration": 56,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('loginCredentials').then(user => {\n  cy.cadastrarUsuario(user.usuarioJaCadastrado).then(res => {\n    expect(res.status).to.equal(400);\n    cy.validarContrato(res, 'post_usuarios', 400).then(validacao => {\n      expect(validacao).to.be.equal('Contrato validado!');\n    });\n  });\n});",
              "err": {},
              "uuid": "bad9c8db-fd51-4740-b90a-143ef29e9f3c",
              "parentUUID": "5849ddd5-2141-43aa-82ae-03cac5c34324",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6cf5ff8-ae26-4e95-a871-5b5287125527",
            "bad9c8db-fd51-4740-b90a-143ef29e9f3c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 158,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2de1b970-5427-4e08-85dc-b8c3dee45dc4",
          "title": "Testes de GET Usuario:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve Buscar um Usuario Pelo ID, GET(201)",
              "fullTitle": "Testes de GET Usuario: Deve Buscar um Usuario Pelo ID, GET(201)",
              "timedOut": null,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.gerarUsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.equal(201);\n  expect(res.body).to.have.property('message', 'Cadastro realizado com sucesso');\n  const ID = res.body._id;\n  cy.validarContrato(res, 'post_usuarios', 201).then(validacao => {\n    expect(validacao).to.be.equal('Contrato validado!');\n    cy.BuscarUsuarioPorId(ID).then(res => {\n      expect(res.status).to.equal(200);\n    });\n  });\n});",
              "err": {},
              "uuid": "05350f8c-6cb1-4c9a-acc7-af14a16696fc",
              "parentUUID": "2de1b970-5427-4e08-85dc-b8c3dee45dc4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar usuários cadastrados, GET(200)",
              "fullTitle": "Testes de GET Usuario: Listar usuários cadastrados, GET(200)",
              "timedOut": null,
              "duration": 196,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listaUsuariosCadastrados().then(res => {\n  expect(res.status).to.equal(200);\n  expect(res.body).to.have.property(\"quantidade\");\n  expect(res.body).to.have.property(\"usuarios\");\n  cy.validarContrato(res, 'get_usuarios', 200).then(validacao => {\n    expect(validacao).to.be.equal('Contrato validado!');\n  });\n});",
              "err": {},
              "uuid": "faa8a29a-5910-4709-a5d3-83a25d455425",
              "parentUUID": "2de1b970-5427-4e08-85dc-b8c3dee45dc4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "listar um usuario cadastrado, GET(200)",
              "fullTitle": "Testes de GET Usuario: listar um usuario cadastrado, GET(200)",
              "timedOut": null,
              "duration": 92,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('loginCredentials').then(user => {\n  cy.cadastrarUsuario(user.usuarioJaCadastrado);\n});\ncy.listaUsuarioCadastrado().then(res => {\n  expect(res.status).to.equal(200);\n  expect(res.body).to.have.property('quantidade').to.equal(1);\n  expect(res.body).to.have.property('usuarios');\n});",
              "err": {},
              "uuid": "95ebacfa-8294-4831-b7fa-6d6abee5b7ac",
              "parentUUID": "2de1b970-5427-4e08-85dc-b8c3dee45dc4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Erro de email ao listar um usuario cadastrado, GET(400)",
              "fullTitle": "Testes de GET Usuario: Erro de email ao listar um usuario cadastrado, GET(400)",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.erroListaUsuarioCadastrado().then(res => {\n  expect(res.status).to.equal(400);\n  expect(res.body).to.have.property(\"email\", \"email deve ser um email válido\");\n  cy.validarContrato(res, 'get_usuarios', 400).then(validacao => {\n    expect(validacao).to.be.equal('Contrato validado!');\n  });\n});",
              "err": {},
              "uuid": "0008e0dd-0d9f-4af4-b75e-1b2d2d4a6874",
              "parentUUID": "2de1b970-5427-4e08-85dc-b8c3dee45dc4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05350f8c-6cb1-4c9a-acc7-af14a16696fc",
            "faa8a29a-5910-4709-a5d3-83a25d455425",
            "95ebacfa-8294-4831-b7fa-6d6abee5b7ac",
            "0008e0dd-0d9f-4af4-b75e-1b2d2d4a6874"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 436,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3fc74d16-093b-49cb-a335-abad0e88bb4c",
          "title": "Testes de PUT Usuario:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve Editar um Usuário, PUT(200)",
              "fullTitle": "Testes de PUT Usuario: Deve Editar um Usuário, PUT(200)",
              "timedOut": null,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.gerarUsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.equal(201);\n  expect(res.body).to.have.property('message', 'Cadastro realizado com sucesso');\n  const ID = res.body._id;\n  cy.editarUsuario(ID).then(res => {\n    expect(res.status).to.equal(200);\n    cy.validarContrato(res, 'put_usuarios', 200).then(validacao => {\n      expect(validacao).to.be.equal('Contrato validado!');\n    });\n  });\n});",
              "err": {},
              "uuid": "06fca394-3d9a-4892-bdca-6db40aabb7c4",
              "parentUUID": "3fc74d16-093b-49cb-a335-abad0e88bb4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Erro ao Editar um Usuário com email ja utilizado, PUT(400)",
              "fullTitle": "Testes de PUT Usuario: Erro ao Editar um Usuário com email ja utilizado, PUT(400)",
              "timedOut": null,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.gerarUsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.equal(201);\n  expect(res.body).to.have.property('message', 'Cadastro realizado com sucesso');\n  const ID = res.body._id;\n  const email = res.body.email;\n  cy.editarUsuarioErro(ID, email).then(res => {\n    expect(res.status).to.equal(400);\n    cy.validarContrato(res, 'put_usuarios', 400).then(validacao => {\n      expect(validacao).to.be.equal('Contrato validado!');\n    });\n  });\n});",
              "err": {},
              "uuid": "593c42a9-1092-442c-b556-401f58fae0d0",
              "parentUUID": "3fc74d16-093b-49cb-a335-abad0e88bb4c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06fca394-3d9a-4892-bdca-6db40aabb7c4",
            "593c42a9-1092-442c-b556-401f58fae0d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 215,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cba766dc-c60b-40f6-a627-2962098a700b",
          "title": "Testes de DELETE Usuario:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve Deletar um Usuario, DELETE(201)",
              "fullTitle": "Testes de DELETE Usuario: Deve Deletar um Usuario, DELETE(201)",
              "timedOut": null,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.gerarUsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.equal(201);\n  expect(res.body).to.have.property('message', 'Cadastro realizado com sucesso');\n  const ID = res.body._id;\n  cy.DeletarUsuarioPorId(ID).then(res => {\n    expect(res.status).to.equal(200);\n    cy.validarContrato(res, 'delete_usuarios', 200).then(validacao => {\n      expect(validacao).to.be.equal('Contrato validado!');\n    });\n  });\n});",
              "err": {},
              "uuid": "86c61944-82f9-4667-b595-1ca32bb248a4",
              "parentUUID": "cba766dc-c60b-40f6-a627-2962098a700b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86c61944-82f9-4667-b595-1ca32bb248a4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1f245b90-c11b-44b6-b53e-2b922ec747f3",
      "title": "",
      "fullFile": "cypress/integration/TestesFrontEnd/cadastrarProduto.spec.js",
      "file": "cypress/integration/TestesFrontEnd/cadastrarProduto.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0f0e273-d64e-4fb4-a04e-09ad4a1460f6",
          "title": "Testes para cadastro de produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validar se o site carregou todos os elementos",
              "fullTitle": "Testes para cadastro de produto Validar se o site carregou todos os elementos",
              "timedOut": null,
              "duration": 8257,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.acesso();\n_login.default.logar();\n_cadastrarProduto.default.acessarCadProduto();\n_cadastrarProduto.default.verificarElementos();",
              "err": {},
              "uuid": "7109f07d-b4b1-4185-b96f-3bd09c6da096",
              "parentUUID": "a0f0e273-d64e-4fb4-a04e-09ad4a1460f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastro de produto com sucesso",
              "fullTitle": "Testes para cadastro de produto Cadastro de produto com sucesso",
              "timedOut": null,
              "duration": 1228,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastrarProduto.default.cadastroCorreto();",
              "err": {},
              "uuid": "9e4ef8e3-c8ba-4f1b-b3ca-a817019c4d0a",
              "parentUUID": "a0f0e273-d64e-4fb4-a04e-09ad4a1460f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7109f07d-b4b1-4185-b96f-3bd09c6da096",
            "9e4ef8e3-c8ba-4f1b-b3ca-a817019c4d0a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9485,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "907ce2d0-7bdc-4dab-88e1-3801b94b8162",
          "title": "Teste negativo de cadastro de produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastro de produto já existente",
              "fullTitle": "Teste negativo de cadastro de produto Cadastro de produto já existente",
              "timedOut": null,
              "duration": 4994,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastrarProduto.default.cadastroProdutoExistente();",
              "err": {},
              "uuid": "9d5767af-4807-462b-af5e-eac83571c68c",
              "parentUUID": "907ce2d0-7bdc-4dab-88e1-3801b94b8162",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d5767af-4807-462b-af5e-eac83571c68c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4994,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4dfaed9b-3a95-4ebf-b53b-e6cdcd2f9628",
      "title": "",
      "fullFile": "cypress/integration/TestesFrontEnd/cadastrarUsuario.spec.js",
      "file": "cypress/integration/TestesFrontEnd/cadastrarUsuario.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ae43bf66-2f9b-493b-8a47-c557feeb4892",
          "title": "Testes positivos de cadastro de usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validar se o site carregou todos os elementos",
              "fullTitle": "Testes positivos de cadastro de usuário Validar se o site carregou todos os elementos",
              "timedOut": null,
              "duration": 5218,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_logout.default.acesso();\n_logout.default.logar();\n_cadastrarUsuario.default.acessarCadUsuario();\n_cadastrarUsuario.default.verificarElementos();",
              "err": {},
              "uuid": "f24c732d-2ee9-4a79-afb3-1704cd6ec41b",
              "parentUUID": "ae43bf66-2f9b-493b-8a47-c557feeb4892",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validar o cadastro correto do usuário",
              "fullTitle": "Testes positivos de cadastro de usuário Validar o cadastro correto do usuário",
              "timedOut": null,
              "duration": 1884,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastrarUsuario.default.fazerCadastroCorreto();",
              "err": {},
              "uuid": "87239d99-8bb8-4db6-8ec5-08d556e4d22d",
              "parentUUID": "ae43bf66-2f9b-493b-8a47-c557feeb4892",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f24c732d-2ee9-4a79-afb3-1704cd6ec41b",
            "87239d99-8bb8-4db6-8ec5-08d556e4d22d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "90d0c745-c3ec-44a5-8eb3-483d5af8e78e",
          "title": "Testes negativos de cadastro de usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastro com email inválido",
              "fullTitle": "Testes negativos de cadastro de usuário Cadastro com email inválido",
              "timedOut": null,
              "duration": 4270,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastrarUsuario.default.cadastroEmailInválido();",
              "err": {},
              "uuid": "caa62b9f-99cd-4019-81d2-e26310fe86a0",
              "parentUUID": "90d0c745-c3ec-44a5-8eb3-483d5af8e78e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastro com email já cadastrado/existente no banco de dados",
              "fullTitle": "Testes negativos de cadastro de usuário Cadastro com email já cadastrado/existente no banco de dados",
              "timedOut": null,
              "duration": 3910,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastrarUsuario.default.cadastroEmailExistente();",
              "err": {},
              "uuid": "bf26a0ee-1487-48b5-8d2b-5c7659b6b1d2",
              "parentUUID": "90d0c745-c3ec-44a5-8eb3-483d5af8e78e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastro com campo email em branco",
              "fullTitle": "Testes negativos de cadastro de usuário Cadastro com campo email em branco",
              "timedOut": null,
              "duration": 3237,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastrarUsuario.default.cadastroEmailEmBranco();",
              "err": {},
              "uuid": "991c3828-74a1-4e3d-ae09-c99cff06bb73",
              "parentUUID": "90d0c745-c3ec-44a5-8eb3-483d5af8e78e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastro com campo nome em branco",
              "fullTitle": "Testes negativos de cadastro de usuário Cadastro com campo nome em branco",
              "timedOut": null,
              "duration": 3711,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastrarUsuario.default.cadastroNomeEmBranco();",
              "err": {},
              "uuid": "dc7d5878-ce15-4fca-925b-f7c831a3ed1d",
              "parentUUID": "90d0c745-c3ec-44a5-8eb3-483d5af8e78e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastro com campo senha em branco",
              "fullTitle": "Testes negativos de cadastro de usuário Cadastro com campo senha em branco",
              "timedOut": null,
              "duration": 3376,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_cadastrarUsuario.default.cadastroSenhaEmBranco();",
              "err": {},
              "uuid": "d9c39331-bd56-484d-8961-75813fdf5f58",
              "parentUUID": "90d0c745-c3ec-44a5-8eb3-483d5af8e78e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "caa62b9f-99cd-4019-81d2-e26310fe86a0",
            "bf26a0ee-1487-48b5-8d2b-5c7659b6b1d2",
            "991c3828-74a1-4e3d-ae09-c99cff06bb73",
            "dc7d5878-ce15-4fca-925b-f7c831a3ed1d",
            "d9c39331-bd56-484d-8961-75813fdf5f58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18504,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "859ead39-09bb-46ec-b0a8-59a4f2b3a9c8",
      "title": "",
      "fullFile": "cypress/integration/TestesFrontEnd/listarProduto.spec.js",
      "file": "cypress/integration/TestesFrontEnd/listarProduto.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5a5779b7-6718-4425-bf98-710990e888ae",
          "title": "Testes de listar produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Teste para validar a url de listar produtos",
              "fullTitle": "Testes de listar produtos Teste para validar a url de listar produtos",
              "timedOut": null,
              "duration": 5297,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.acesso();\n_login.default.logar();\n_listarProduto.default.validarBotao();",
              "err": {},
              "uuid": "c6ff6a8b-744f-41fd-a68b-1473d954e3ca",
              "parentUUID": "5a5779b7-6718-4425-bf98-710990e888ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Teste para conferir os elementos da página",
              "fullTitle": "Testes de listar produtos Teste para conferir os elementos da página",
              "timedOut": null,
              "duration": 563,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listarProduto.default.elementosDaPagina();",
              "err": {},
              "uuid": "e58f98e3-ea67-4cb7-9e0d-ff74af32f4dc",
              "parentUUID": "5a5779b7-6718-4425-bf98-710990e888ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Teste para excluir produtos",
              "fullTitle": "Testes de listar produtos Teste para excluir produtos",
              "timedOut": null,
              "duration": 5240,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.acesso();\n_login.default.logar();\n_listarProduto.default.validarBotao();\n_listarProduto.default.excluirPrimeiroProduto(); ///        ListarProduto.validarExclusao()",
              "err": {},
              "uuid": "15a6708e-cb8b-4fca-a7e7-d4788a434b50",
              "parentUUID": "5a5779b7-6718-4425-bf98-710990e888ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6ff6a8b-744f-41fd-a68b-1473d954e3ca",
            "e58f98e3-ea67-4cb7-9e0d-ff74af32f4dc",
            "15a6708e-cb8b-4fca-a7e7-d4788a434b50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e99e82a9-118a-4729-9295-c4d3e7ead45b",
      "title": "",
      "fullFile": "cypress/integration/TestesFrontEnd/listarUsuarios.spec.js",
      "file": "cypress/integration/TestesFrontEnd/listarUsuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2130a9a9-0333-463b-87f9-85cc677cca57",
          "title": "Testes de cenários positivos da rota listar usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "O botão deve levar para a página correta",
              "fullTitle": "Testes de cenários positivos da rota listar usuários O botão deve levar para a página correta",
              "timedOut": null,
              "duration": 2975,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_logout.default.acesso();\n_logout.default.logar();\n_listarusuarios.default.validarBotao();",
              "err": {},
              "uuid": "eea8fcb4-d618-46f8-83be-519b050d30e8",
              "parentUUID": "2130a9a9-0333-463b-87f9-85cc677cca57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Teste para validar se os elementos da página existem",
              "fullTitle": "Testes de cenários positivos da rota listar usuários Teste para validar se os elementos da página existem",
              "timedOut": null,
              "duration": 801,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listarusuarios.default.elementosDaPagina();",
              "err": {},
              "uuid": "5424608f-06ee-4337-9fa3-dee8e7cd9089",
              "parentUUID": "2130a9a9-0333-463b-87f9-85cc677cca57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Teste para validar se o primeiro usuário listado é excluído corretamente",
              "fullTitle": "Testes de cenários positivos da rota listar usuários Teste para validar se o primeiro usuário listado é excluído corretamente",
              "timedOut": null,
              "duration": 3623,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listarusuarios.default.excluirPrimeiroUsuario();\n_logout.default.acesso();\n_logout.default.logar();\n_listarusuarios.default.validarBotao(); ///        ListarUsuarios.validarExclusao()",
              "err": {},
              "uuid": "90739b3f-c24c-4583-9316-56539601a219",
              "parentUUID": "2130a9a9-0333-463b-87f9-85cc677cca57",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eea8fcb4-d618-46f8-83be-519b050d30e8",
            "5424608f-06ee-4337-9fa3-dee8e7cd9089",
            "90739b3f-c24c-4583-9316-56539601a219"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7399,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "09f9f561-439c-4fe5-8d91-2a649411036e",
      "title": "",
      "fullFile": "cypress/integration/TestesFrontEnd/login.spec.js",
      "file": "cypress/integration/TestesFrontEnd/login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "af8f407d-7ac5-4817-b2a0-35a8ec9e42fe",
          "title": "Testes de login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve verificar os elementos da página",
              "fullTitle": "Testes de login Deve verificar os elementos da página",
              "timedOut": null,
              "duration": 1714,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.acesso();\n_login.default.elementosDaPagina();",
              "err": {},
              "uuid": "71510d12-a9a1-4e71-af33-4f7028ef2bbf",
              "parentUUID": "af8f407d-7ac5-4817-b2a0-35a8ec9e42fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve realizar login corretamente",
              "fullTitle": "Testes de login Deve realizar login corretamente",
              "timedOut": null,
              "duration": 1558,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.acesso();\n_login.default.logar();\n_login.default.loginCorreto();",
              "err": {},
              "uuid": "334f93c6-bbd9-42d9-ada9-fa84718a0b4b",
              "parentUUID": "af8f407d-7ac5-4817-b2a0-35a8ec9e42fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "71510d12-a9a1-4e71-af33-4f7028ef2bbf",
            "334f93c6-bbd9-42d9-ada9-fa84718a0b4b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3272,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "19ece568-61d7-4091-b0fc-55a065bab73d",
          "title": "Teste negativo de login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Não realizará login",
              "fullTitle": "Teste negativo de login Não realizará login",
              "timedOut": null,
              "duration": 1443,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.acesso();\n_login.default.loginIncorreto();",
              "err": {},
              "uuid": "c2e213e8-418a-4d69-a3cc-65550af0d8b0",
              "parentUUID": "19ece568-61d7-4091-b0fc-55a065bab73d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c2e213e8-418a-4d69-a3cc-65550af0d8b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1443,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4aa6720e-b71b-4fb6-bcf6-6c8fb78b5a64",
      "title": "",
      "fullFile": "cypress/integration/TestesFrontEnd/logout.spec.js",
      "file": "cypress/integration/TestesFrontEnd/logout.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b2f144d0-b263-45df-9955-9a0d7f6e95db",
          "title": "Testes do botão logout",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "O botão logout deve fazer corretamente o logout do usuário e levar o user para a home",
              "fullTitle": "Testes do botão logout O botão logout deve fazer corretamente o logout do usuário e levar o user para a home",
              "timedOut": null,
              "duration": 3099,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_logout.default.acesso();\n_logout.default.logar();\n_logout.default.logoutCorreto();",
              "err": {},
              "uuid": "a3132c4d-faba-439c-ba58-603940447ff5",
              "parentUUID": "b2f144d0-b263-45df-9955-9a0d7f6e95db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a3132c4d-faba-439c-ba58-603940447ff5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3099,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "aac0db3e-ccda-4641-ba74-dff5f6702ad2",
      "title": "",
      "fullFile": "cypress/integration/TestesFrontEnd/navBar.spec.js",
      "file": "cypress/integration/TestesFrontEnd/navBar.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f562f1fe-98fc-47b8-b89c-5124504e5d12",
          "title": "Testes positivos na barra de navegação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ao clicar nos botões da barra de navegação, a página correta deve ser carregada",
              "fullTitle": "Testes positivos na barra de navegação Ao clicar nos botões da barra de navegação, a página correta deve ser carregada",
              "timedOut": null,
              "duration": 4715,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_logout.default.acesso();\n_logout.default.logar();\n_navBar.default.navCadastroUser();\n_navBar.default.navListaUser();\n_navBar.default.navCadastroProd();\n_navBar.default.navListaProd();\n_navBar.default.navRelatorios();\n_navBar.default.navHome();",
              "err": {},
              "uuid": "52fa8672-e713-4013-b5d1-d444b8f9ad6e",
              "parentUUID": "f562f1fe-98fc-47b8-b89c-5124504e5d12",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "52fa8672-e713-4013-b5d1-d444b8f9ad6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4715,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitles": "Relatorio",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}